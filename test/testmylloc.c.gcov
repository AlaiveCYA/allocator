        -:    0:Source:test/testmylloc.c
        -:    1:#include <assert.h>
        -:    2:#include "../src/mylloc.h"
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:
        -:    6:
        1:    7:void test_mylloc_and_myfree(void){
        -:    8:
        1:    9:    void *block = mylloc(20);
       1*:   10:    assert(block != NULL);
        1:   11:    myfree(block);
        -:   12:
        1:   13:}
        -:   14:
        1:   15:void test_myfree_null(void){
        -:   16:
        1:   17:    myfree(NULL);
        -:   18:
        1:   19:}
        -:   20:
        1:   21:void test_mylloc_same_block(void){
        -:   22:
        1:   23:    void *block = mylloc(20);
       1*:   24:    assert(block != NULL);
        -:   25:
        1:   26:    myfree(block);
        -:   27:
        1:   28:    void *block2 = mylloc(20);
       1*:   29:    assert(block2 != NULL);
        -:   30:
       1*:   31:    assert(block == block2);
        -:   32:
        1:   33:}
        -:   34:
        1:   35:void test_mylloc_divide_block(void){
        -:   36:
        1:   37:    void *block = mylloc(200);
       1*:   38:    assert(block != NULL);
        -:   39:
        1:   40:    myfree(block);
        -:   41:
        1:   42:    void *block2 = mylloc(20);
       1*:   43:    assert(block2 != NULL);
        -:   44:
        1:   45:}
        -:   46:
        1:   47:void test_myfree_merging(void){
        -:   48:
        1:   49:    void* block = mylloc(20);
       1*:   50:    assert(block != NULL);
        -:   51:
        1:   52:    void* block2 = mylloc(20);
       1*:   53:    assert(block2 != NULL);
        -:   54:
        1:   55:    myfree(block2);
        1:   56:    myfree(block);
        1:   57:}
        -:   58:
        1:   59:void test_getStats(void){
        -:   60:
        -:   61:    struct Stats stats;
        1:   62:    getStats(&stats);
        -:   63:
       1*:   64:    assert(stats.allocCalls == 7);
       1*:   65:    assert(stats.averageAllocatedBytes == 45);
       1*:   66:    assert(stats.peakMemory == 276);
       1*:   67:    assert(stats.totalAllocatedBytes == 320);
       1*:   68:    assert(stats.sbrkCalls == 4);
        -:   69:
        1:   70:}
        -:   71:
        1:   72:int main() {
        -:   73:
        1:   74:    int status = initializeAllocator();
        1:   75:    if(status == -1){
    #####:   76:        fprintf(stderr,"Error initializing allocator\n");
    #####:   77:        exit(EXIT_FAILURE);
        -:   78:    }
        1:   79:    test_mylloc_and_myfree();
        1:   80:    test_myfree_null();
        1:   81:    test_mylloc_same_block();
        1:   82:    test_myfree_merging();
        -:   83:    
        1:   84:    test_mylloc_divide_block();
        -:   85:
        1:   86:    dumpMemory();
        -:   87:
        1:   88:    test_getStats();
        -:   89:
        1:   90:    return 0;
        -:   91:}
        -:   92:
        -:   93:
